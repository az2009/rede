<?php
/**
 * Jefferson Porto
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  Az2009
 * @package   Az2009_Cielo
 *
 * @copyright Copyright (c) 2018 Jefferson Porto - (https://www.linkedin.com/in/jeffersonbatistaporto/)
 *
 * @author    Jefferson Porto <jefferson.b.porto@gmail.com>
 */
namespace Az2009\Cielo\Model\Method;

abstract class AbstractMethod extends \Magento\Payment\Model\Method\AbstractMethod
{

    const CODE_CURRENCY_REAL_BRL = 'BRL';

    const CODE_COUNTRY_BR = 'BR';

    /**
     * @var DataObject
     */
    protected $request;

    /**
     * @var DataObject
     */
    protected $response;

    /**
     * @var \Az2009\Cielo\Helper\Data
     */
    protected $helper;

    /**
     * @var string
     */
    protected $keyRequest;

    /**
     * @var array
     */
    protected $_path = [];

    /**
     * @var \Magento\Framework\HTTP\ZendClientFactory
     */
    protected $httpClientFactory;

    /**
     * @var string
     */
    protected $_uri;

    /**
     * @var Validate
     */
    protected $validate;

    /**
     * @var bool
     */
    protected $_postback = false;

    /**
     * @var \Magento\Framework\DataObject
     */
    protected $_update;

    public function __construct(
        \Magento\Framework\Model\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory,
        \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory,
        \Magento\Payment\Helper\Data $paymentData,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Magento\Payment\Model\Method\Logger $logger,
        \Magento\Framework\DataObject $request,
        \Magento\Framework\DataObject $response,
        Validate $validate,
        \Magento\Framework\HTTP\ZendClientFactory $httpClientFactory,
        \Az2009\Cielo\Helper\Data $helper,
        \Magento\Framework\DataObject $update,
        \Magento\Framework\Model\ResourceModel\AbstractResource $resource = null,
        \Magento\Framework\Data\Collection\AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct(
            $context,
            $registry,
            $extensionFactory,
            $customAttributeFactory,
            $paymentData,
            $scopeConfig,
            $logger,
            $resource,
            $resourceCollection,
            $data
        );

        $this->validate = $validate;
        $this->helper = $helper;
        $this->response = $response;
        $this->request = $request;
        $this->httpClientFactory = $httpClientFactory->create();
        $this->_uri = $this->helper->getUriRequest();
        $this->_update = $update;

    }

    /**
     * @param \Magento\Framework\DataObject $data
     *
     * @return $this
     */
    public function assignData(\Magento\Framework\DataObject $data)
    {
        parent::assignData($data);
        $info = $this->getInfoInstance();
        $info->setAdditionalInformation($data->getAdditionalData());

        return $this;
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @param float $amount
     */
    public function refund(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        if ($payment->getAdditionalInformation('captured_offline')) {
            throw new \Az2009\Cielo\Exception\Cc(
                __('Transaction captured offline. Please create the credit memo offline.')
            );
        }

        $this->setAmount($payment, $amount);
        self::void($payment);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     *
     * @return $this|AbstractMethod
     */
    public function cancel(\Magento\Payment\Model\InfoInterface $payment)
    {
        return self::void($payment);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     *
     * @return $this
     */
    public function void(\Magento\Payment\Model\InfoInterface $payment)
    {
        $payment->setActionCancel(true);
        $this->setPath($payment->getLastTransId(), 'refunds')
            ->post()
            ->request();

        return $this;
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @param float $amount
     *
     * @return $this
     */
    public function authorize(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        $this->setAmount($payment, $amount);
        $payment->setAdditionalInformation('can_capture', false);
        $this->setRunValidate(true);
        $this->post()->request();

        return $this;
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @param float $amount
     *
     * @return $this
     *
     * @throws \Az2009\Cielo\Exception\Cc
     */
    public function capture(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        //set value that are being captured
        $this->setAmount($payment, $amount);

        //check if operation have transaction authorize
        if ($payment->getLastTransId() && $payment->getOrder()->getTotalDue()) {
            $params = json_encode(['Amount' => $this->helper->formatNumber($amount)]);
            $this->setRunValidate(false);
            $this->setPath($payment->getLastTransId(), '')
                 ->put($params);
        } else {
            $payment->setAdditionalInformation('can_capture', true);
            $this->post();
        }

        $this->request();

        return $this;
    }

    /**
     * Set amount total to authorize and capture
     *
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @param $amount
     *
     * @throws \Az2009\Cielo\Exception\Cc
     */
    public function setAmount(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        if ($amount <= 0) {
            throw new \Az2009\Cielo\Exception\Cc(__('Invalid amount for capture.'));
        }

        $payment->setAmount($amount);
    }

    protected function _validate()
    {
        $this->validate
            ->setPayment($this)
            ->validate();
    }

    /**
     * @return DataObject
     */
    public function getRequest()
    {
        return $this->request;
    }

    /**
     * @return DataObject
     */
    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Get instance client
     *
     * @return \Magento\Framework\HTTP\ZendClient
     */
    public function getClient()
    {
        return $this->httpClientFactory
            ->setUri($this->getUri())
            ->setAuth(
                $this->helper->getMerchantId(),
                $this->helper->getMerchantKey()
            )
            ->setHeaders(['Content-Type' => 'application/json']);
    }

    /**
     * Get uri to request
     *
     * @return mixed|string
     */
    public function getUri()
    {
        $uri = $this->_uri . '/' . $this->getPath();
        $uri = $this->helper->sanitizeUri($uri);
        return $uri;
    }

    /**
     * Send request of type PUT
     *
     * @return $this
     */
    public function put($paramsJson = '')
    {
        if (empty($paramsJson)) {
            $paramsJson = $this->getParams();
        }

        $this->getClient()
            ->setRawData($paramsJson)
            ->setMethod(\Magento\Framework\HTTP\ZendClient::PUT);

        return $this;
    }

    /**
     * Send request of type POST
     *
     * @return $this
     */
    public function post()
    {
        $params = $this->getParams();
        $this->getClient()
            ->setMethod(\Magento\Framework\HTTP\ZendClient::POST)
            ->setRawData($params);

        return $this;
    }

    /**
     * Send request of type GET
     *
     * @return $this
     */
    public function get()
    {
        $params = $this->getParams();
        $this->getClient()
            ->setMethod(\Magento\Framework\HTTP\ZendClient::GET)
            ->setRawData($params);

        return $this;
    }

    /**
     * @return string
     */
    public function getPath()
    {
        $path = '';
        foreach ($this->_path as $k => $v) {
            if (!empty($v)) {
                $path .= $k .'/'.$v;
            } else {
                $path .= $k;
            }
        }

        return $path;
    }

    /**
     * @param $k
     * @param $v
     *
     * @return $this
     */
    public function setPath($k, $v)
    {
        $this->_path[$k] = $v;

        return $this;
    }

    /**
     * Get params of request
     *
     * @param DataObject $payment
     *
     * @return mixed
     */
    public function getParams()
    {
        $request = $this->getRequest()
            ->setPaymentData($this->getInfoInstance())
            ->buildRequest();

        return $request;
    }

    /**
     * Execute the request
     *
     * @throws \Exception
     */
    public function request()
    {
        try {

            if ($this->getRunValidate()) {
                $this->_validate();
            }

            $this->_eventManager->dispatch(
                'before_send_request_cielo',
                ['client' => $this->getClient()]
            );

            $response = $this->getClient()->request();

            $this->getResponse()
                 ->setResponse($response);

            $this->_eventManager->dispatch(
                'after_send_request_cielo',
                ['client' => $this->getClient()]
            );

            return $this->_processResponse();

        } catch(\Az2009\Cielo\Exception\Cc $e) {
            throw $e;
        } catch(\Exception $e) {
            $message = 'Occurred an error during payment process. Try Again.';
            $this->isCatchException($response, $message);
            $this->_logger->error($e->getMessage());
            throw new \Exception(__($message));
        }

        return $this;
    }

    /**
     * Check if exception is message to the user
     *
     * @param \Zend_Http_Response $response
     * @param $message
     *
     * @throws \Az2009\Cielo\Exception\Cc
     */
    public function isCatchException(\Zend_Http_Response $response, $message)
    {
        if ($response->getStatus() == \Zend\Http\Response::STATUS_CODE_400
            && isset(\Zend\Json\Decoder::decode($response->getBody())[0])
            && property_exists(\Zend\Json\Decoder::decode($response->getBody())[0], 'Message')
            && $message = (string)\Zend\Json\Decoder::decode($response->getBody())[0]->Message
        ) {
            throw new \Az2009\Cielo\Exception\Cc(__($message));
        }
    }

    /**
     * Process response
     *
     * @param $response
     */
    protected function _processResponse()
    {
        $this->getResponse()
            ->setPayment($this->getInfoInstance())
            ->process();

        return $this;
    }

    /**
     * @return bool
     */
    public function getPostbackInstance()
    {
        return $this->_postback;
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     *
     * @return bool
     */
    public function denyPayment(\Magento\Payment\Model\InfoInterface $payment)
    {
        return true;
    }

    /**
     * @param null $storeId
     *
     * @return bool
     */
    public function isActive($storeId = null)
    {
        if (!$this->helper->isActive()) {
            return false;
        }

        return parent::isActive($storeId); // TODO: Change the autogenerated stub
    }

    /**
     * @param \Magento\Quote\Api\Data\CartInterface|null $quote
     *
     * @return bool
     */
    public function isAvailable(\Magento\Quote\Api\Data\CartInterface $quote = null)
    {

        if (!$this->helper->isActive()) {
            return false;
        }

        return parent::isAvailable($quote); // TODO: Change the autogenerated stub
    }

    public function canRefund()
    {
        $info = $this->getInfoInstance();
        if ($info->getAdditionalInformation('captured_offline')) {
            return false;
        }

        if (!$info->getLastTransId()) {
            return false;
        }

        return parent::canRefund();
    }

}