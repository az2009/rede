<?php
/**
 * Jefferson Porto
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  Az2009
 * @package   Az2009_Rede
 *
 * @copyright Copyright (c) 2018 Jefferson Porto - (https://www.linkedin.com/in/jeffersonbatistaporto/)
 *
 * @author    Jefferson Porto <jefferson.b.porto@gmail.com>
 */
namespace Az2009\Rede\Helper;

class Data extends \Magento\Framework\App\Helper\AbstractHelper
{

    const CHANGE_TYPE = 1;

    const CARD_TOKEN = 'new';

    const ID_DENY = 'deny_payment';

    const ID_ACCEPT = 'accept_payment';

    const COUNTRY_CODE_BRL = 'BR';

    /**
     * @var \Magento\Framework\View\Asset\Repository
     */
    protected $_asset;

    /**
     * @var \Magento\Sales\Model\ResourceModel\Order\CollectionFactory
     */
    protected $_orderCollection;

    /**
     * @var \Magento\Sales\Model\Order
     */
    protected $_order;

    /**
     * @var \Magento\Customer\Model\Session
     */
    public $_session;

    /**
     * @var \Magento\Sales\Model\ResourceModel\Order\Payment\Transaction\CollectionFactory
     */
    protected $_transaction;

    /**
     * @var \Magento\Framework\ObjectManagerInterface
     */
    protected $_objectManager;

    /**
     * @var null
     */
    protected $_item = null;

    /**
     * @var \Az2009\Rede\Model\Source\CountryCodes
     */
    protected $_countryIso;

    public function __construct(
        \Magento\Framework\App\Helper\Context $context,
        \Magento\Sales\Model\ResourceModel\Order\CollectionFactory $orderCollection,
        \Magento\Sales\Model\Order $order,
        \Magento\Sales\Model\ResourceModel\Order\Payment\Transaction\CollectionFactory $transaction,
        \Magento\Customer\Model\Session $session,
        \Magento\Framework\View\Asset\Repository $asset,
        \Magento\Framework\ObjectManagerInterface $objectManager,
        \Az2009\Rede\Model\Source\CountryCodes $countryIso
    )
    {
        $this->_asset = $asset;
        $this->_orderCollection = $orderCollection;
        $this->_order = $order;
        $this->_session = $session;
        $this->_transaction = $transaction;
        $this->_objectManager = $objectManager;
        $this->_countryIso = $countryIso;
        parent::__construct($context);
    }

    /**
     * @return mixed
     */
    public function getMerchantId()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/merchant_id',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );

        return $config;
    }

    /**
     * @return mixed
     */
    public function getMerchantKey()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/merchant_key',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );

        return $config;
    }

    /**
     * @return mixed
     */
    public function getMode()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/mode',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );

        return $config;
    }

    /**
     * @return string
     */
    public function getUriRequest()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/uri_request_production'
        );

        if ($this->getMode() == \Az2009\Rede\Model\Source\Mode::MODE_STAGE) {
            $config = $this->scopeConfig->getValue(
                'payment/az2009_rede_core/uri_request_stage'
            );
        }

        return (string)$config;
    }

    /**
     * @return string
     */
    public function getUriQuery()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/uri_request_production'
        );

        if ($this->getMode() == \Az2009\Rede\Model\Source\Mode::MODE_STAGE) {
            $config = $this->scopeConfig->getValue(
                'payment/az2009_rede_core/uri_request_stage'
            );
        }

        return (string)$config;
    }

    /**
     * @return array|mixed
     */
    public function getCardTypesAvailable()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede/cctypes',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );

        $config = explode(',', $config);

        return $config;
    }

    /**
     * @return string
     */
    public function getKeyRequest()
    {
        $key = urlencode(mt_rand(0, 999) .
            mt_rand(1000, 1999) .
            time() .
            $_SERVER['SERVER_ADDR']);

        return $key;
    }

    /**
     * Remove placeholders of uri
     *
     * @param $uri
     *
     * @return mixed
     */
    public function sanitizeUri($uri)
    {
        $uri = str_replace('//', '/', $uri);
        $uri = str_replace(':/', '://', $uri);
        $uri = str_replace(
            [
                '-capture',
                '-refund',
                '-order',
                '-offline',
                '-authorize'
            ],
            '',
            $uri
        );

        return $uri;
    }

    /**
     * Get cards saved by customerId
     *
     * @param $customerId int
     *
     * @return array
     */
    public function getCardSavedByCustomer($customerId = null)
    {
        $tokens = [];

        if (is_null($customerId) && $this->_session->isLoggedIn()) {
            $customerId = $this->_session->getCustomerId();
        }

        if (empty($customerId)) {
            return $tokens;
        }

        $collection = $this->_orderCollection->create();
        $collection->addAttributeToSelect('entity_id');
        $collection->addAttributeToFilter(
            'customer_id',
            array(
                'eq' => $customerId
            )
        );
        $collection->getSelect()
            ->join(
                array('sop' => $collection->getTable('sales_order_payment')),
                'main_table.entity_id = sop.parent_id AND sop.card_token IS NOT NULL',
                []
            )
            ->group('sop.card_token');


        foreach ($collection as $order) {
            $tokens[$order->getPayment()->getData('card_token')] = [
                'brand' => $order->getPayment()->getAdditionalInformation('cc_type'),
                'last_four' => $this->getCardLabel($order->getPayment()),
                'month_due' => $order->getPayment()->getAdditionalInformation('cc_exp_month'),
                'year_due' => $order->getPayment()->getAdditionalInformation('cc_exp_year'),
                'cardholder' => $order->getPayment()->getAdditionalInformation('cc_name'),
            ];
        }

        return $tokens;
    }

    /**
     * @param \Magento\Sales\Model\Order\Payment\Interceptor $payment
     *
     * @return string
     */
    public function getCardLabel(\Magento\Sales\Model\Order\Payment\Interceptor $payment)
    {
        $firstFour = substr($payment->getAdditionalInformation('cc_number') ?: $payment->getAdditionalInformation('cc_number_enc'), 0, 4);
        $lastFour = substr($payment->getAdditionalInformation('cc_number') ?: $payment->getAdditionalInformation('cc_number_enc'), -4);

        return $firstFour . ' ****  **** ' . $lastFour;
    }

    /**
     * Sanitize string
     *
     * @param $value
     * @param $maxlength
     * @param null $init
     *
     * @return bool|string
     */
    public function prepareString($value, $maxlength, $init = null)
    {
        if (!is_null($init)) {
            return substr(trim($value), (int)$init, $maxlength);
        }

        return substr(trim($value), $maxlength);
    }

    /**
     * @return bool
     */
    public function canDebug()
    {
        $config = $this->scopeConfig->getValue(
            'payment/az2009_rede_core/debug',
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE
        );

        return (boolean)$config;
    }

    /**
     * @return \Psr\Log\LoggerInterface
     */
    public function getLogger()
    {
        return $this->_logger;
    }

    /**
     * Get instance postback of payment
     *
     * @param $transactionId
     *
     * @return bool | object
     */
    public function getPostbackByTransId($transactionId)
    {
        $instance = false;
        $collection = $this->_transaction->create();

        $collection->addAttributeToSelect('order_id')
            ->addAttributeToFilter('txn_id',
                array(
                    array('eq' => $transactionId),
                    array('eq' => $transactionId . '-order'),
                )
            );

        if ($collection->getSize() <= 0) {
            return $instance;
        }

        $orderId = $collection->getFirstItem()
            ->getOrderId();

        if ((int)$orderId && (int)$this->_order->load($orderId)->getId()) {
            $instance = $this->_order
                ->getPayment()
                ->getMethodInstance()
                ->getPostbackInstance();
        }

        if ($instance !== null) {
            $instance = $this->_objectManager->get($instance);
        }

        return $instance;
    }

    /**
     * @param $token
     *
     * @return $this|bool|null
     */
    public function getCardDataByToken($token)
    {
        if ($this->_item !== null
            && $this->_item->getData('card_token') == $token
        ) {
            return $this->_item;
        }

        /** @var \Magento\Sales\Model\Order\Payment $payment */
        $payment = $this->_objectManager->get(\Magento\Sales\Model\Order\Payment::class);
        $this->_item = $payment->load($token, 'card_token');

        if ($this->_item->getId()) {
            return $this->_item;
        }

        return false;
    }

    /**
     * @return \Magento\Framework\Message\ManagerInterface
     */
    public function getMessage()
    {
        return $this->_objectManager->get(\Magento\Framework\Message\ManagerInterface::class);
    }

    /**
     * @param $order
     *
     * @return bool
     */
    public function canAuthorizeOffline($order)
    {
        if ($order instanceof \Magento\Sales\Model\Order
            && in_array($order->getPayment()->getMethod(), $this->getCodesPayment())
            && ($order->isPaymentReview())
        ) {
            return true;
        }

        return false;
    }

    /**
     * @param $order
     *
     * @return bool
     */
    public function canCancelOffline($order)
    {
        if ($order instanceof \Magento\Sales\Model\Order
            && in_array($order->getPayment()->getMethod(), $this->getCodesPayment())
            && !in_array(
                $order->getState(), [
                \Magento\Sales\Model\Order::STATE_CLOSED,
                \Magento\Sales\Model\Order::STATE_COMPLETE,
                \Magento\Sales\Model\Order::STATE_CANCELED
            ])
            && ($this->hasInvoiceOpen($order) || !$order->hasInvoices())
        ) {
            return true;
        }

        return false;
    }

    /**
     * @param \Magento\Sales\Model\Order $order
     *
     * @return bool
     */
    public function hasInvoiceOpen(\Magento\Sales\Model\Order $order)
    {
        /** @var \Magento\Sales\Model\Order\Invoice $invoice */
        foreach ($order->getInvoiceCollection() as $invoice) {
            if ($invoice->getState() == $invoice::STATE_OPEN) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param $order
     *
     * @return bool
     */
    public function canUpdate($order)
    {
        if (!($order instanceof \Magento\Sales\Model\Order)) {
            return false;
        }

        if (!$order->getPayment()->getLastTransId()) {
            return false;
        }

        return $this->canCancelOffline($order);
    }

    /**
     * @return array
     */
    public function getCodesPayment()
    {
        return [
            \Az2009\Rede\Model\Method\Cc\Cc::CODE_PAYMENT,
            \Az2009\Rede\Model\Method\Dc\Dc::CODE_PAYMENT
        ];
    }

    /**
     * @param $date
     *
     * @return bool|\DateTime
     */
    public function createDate($date)
    {
        try {
            $object = new \DateTime($date);
            return $object;
        } catch(\Exception $e) {}

        return false;
    }

    /**
     * @return bool
     */
    public function isActive()
    {
        $merchantId = $this->getMerchantId();
        $merchantKey = $this->getMerchantKey();

        if (empty($merchantId) || empty($merchantKey)) {
            return false;
        }

        return true;
    }

    /**
     * @return \Magento\Framework\UrlInterface
     */
    public function getUrlBuilder()
    {
        return $this->_urlBuilder;
    }

    /**
     * @param $state
     *
     * @return string
     */
    public function getCountryCodeAlpha3($state)
    {
        return $this->_countryIso->getCountryCodeAlpha3($state);
    }

    /**
     * Convert real to cents
     *
     * @param $amount
     *
     * @return int
     */
    public function formatNumber($amount)
    {
        return (int)number_format($amount, 2, '', '');
    }

    public function convertToPrice($amount)
    {
        return number_format($amount/100, 2, '.', '');
    }

    /**
     * Format
     *
     * @param $price
     *
     * @return string
     */
    public function formatPrice($price)
    {
        return $this->_order->getOrderCurrency()->formatPrecision($price, 2, [], false);
    }
}